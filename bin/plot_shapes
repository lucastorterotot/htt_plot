#!/usr/bin/env python
# -*- coding: utf-8 -*-

# options for script
from optparse import OptionParser
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-c", "--channel", dest = "channel",
                  default="tt",
                  help='Name of the channel')
parser.add_option("-C", "--category", dest = "category",
                  default='inclusive',
                  help='Category to process: inclusive, btag, nobtag...')

(options,args) = parser.parse_args()

root_file = './inputs/{}/htt_input_2017.root'.format(options.channel,options.channel)
opening_mode = 'READ'

import ROOT

data_file = ROOT.TFile(root_file, opening_mode)

cat_dict_mt = {
    'mt_nobtag_tight':'htt_mt_8_13TeV',
    'mt_btag_tight':'htt_mt_9_13TeV',
    'mt_nobtag_loosemt':'htt_mt_10_13TeV',
    'mt_btag_loosemt':'htt_mt_11_13TeV',
    'mt_inclusive':'htt_mt_7_13TeV',
}

histdir = data_file.Get(cat_dict_mt["{}_{}".format(options.channel, options.category)])

hist_names = [key.GetName() for key in histdir.GetListOfKeys()]

removes = ['_mc_Down', '_mc_Up', '_bbH', '_ggH']
if options.channel in ['et', 'mt']:
    removes += ['ZJ']
hist_names = [hn for hn in hist_names if not any(r in hn for r in removes)]

updo = ['_Up', '_Down', 'Up', 'Down']
hist_names_nomi = [hn for hn in hist_names if not any(r in hn for r in updo)]

shapes = {}
for process in hist_names_nomi:
    shapes[process] = {}
    for hn in hist_names:
        if process == hn[:len(process)] and not process == hn:
            if 'Up' in hn:
                syst = hn.replace(process,'').replace('Up','')[1:]
            elif 'Down' in hn:
                syst = hn.replace(process,'').replace('Down','')[1:]
            else:
                import pdb; pdb.set_trace()
            if syst[-1] == '_':
                syst = syst[:-1]
            name = hn.replace(process,'').replace('_{}'.format(syst),'').replace('{}'.format(syst),'')
            syst = syst.replace('CMS_htt_{}_{}_13TeV__'.format(options.channel, options.category),'')
            if syst not in shapes[process]:
                shapes[process][syst] = {}
            if name[0] == '_':
                name = name[1:]
            shapes[process][syst][name] = hn

from cpyroot.tools.DataMC.DataMCPlot import DataMCPlot
import htt_plot.tools.plotting.styles as styles
import copy

def buildCanvas(name, syst='nominal'):
    can = ROOT.TCanvas('can'+name+syst, '', 800, 800)
    can.Divide(1, 2, 0.0, 0.0)
    
    pad = can.GetPad(1)
    padr = can.GetPad(2)
    
    # Set Pad sizes
    pad.SetPad(0.0, 0.32, 1., 1.0)
    padr.SetPad(0.0, 0.00, 1., 0.34)
    
    pad.SetTopMargin(0.08)
    pad.SetLeftMargin(0.16)
    pad.SetBottomMargin(0.03)
    pad.SetRightMargin(0.05)
    
    padr.SetBottomMargin(0.35)
    padr.SetLeftMargin(0.16)
    padr.SetRightMargin(0.05)
        
    can.cd()
    import locale; locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
    can.Draw()
    pad.Draw()
    padr.Draw()

    return can, pad, padr


import os
os.system("mkdir -p ./shapes_ctrl_plots/{}/{}/".format(options.channel, options.category))

integrals_infos = {}
Nb_events_infos = {}
integrals_max_ratios = {}
integrals_min_ratios = {}
integrals_max_ratios_err = {}
integrals_min_ratios_err = {}
Nb_bins_for_infos = 0

for process in shapes:
    print process
    integrals_infos[process] = {}
    Nb_events_infos[process] = {}
    integrals_max_ratios[process] = {}
    integrals_min_ratios[process] = {}
    integrals_max_ratios_err[process] = {}
    integrals_min_ratios_err[process] = {}
    for syst in shapes[process]:
        integrals_infos[process][syst] = {}
        Nb_events_infos[process][syst] = {}
        integrals_max_ratios[process][syst] = 1
        integrals_min_ratios[process][syst] = 1
        integrals_max_ratios_err[process][syst] = 0
        integrals_min_ratios_err[process][syst] = 0
        Nb_bins_for_infos += 1
        histo_nomi = histdir.Get(process)
        try:
            histo_up = histdir.Get(shapes[process][syst]['Up'])
        except(KeyError):
            print "No Up for {} {}".format(process, syst)
            histo_up = copy.copy(histo_nomi)
        try:
            histo_down = histdir.Get(shapes[process][syst]['Down'])
        except(KeyError):
            print "No Down for {} {}".format(process, syst)
            histo_down = copy.copy(histo_nomi)

        histo_nomi.SetFillColor(0)
        histo_up.SetFillColor(0)
        histo_down.SetFillColor(0)
        histo_nomi.SetMarkerStyle(2)
        histo_up.SetMarkerStyle(26)
        histo_down.SetMarkerStyle(24)
        histo_nomi.SetMarkerColor(1)
        histo_nomi.SetLineColor(1)
        histo_up.SetMarkerColor(styles.EWKcol)
        histo_up.SetLineColor(styles.EWKcol)
        histo_down.SetMarkerColor(styles.dycol)
        histo_down.SetLineColor(styles.dycol)
        
        can, pad, padr = buildCanvas(process, syst=syst)
        pad.cd()

        histo_nomi.SetTitle('{} {}'.format(process, syst))
        histo_nomi.SetStats(0)
        histo_nomi.Draw('')
        histo_up.SetTitle('')
        histo_down.SetTitle('')
        histo_up.Draw("same")
        histo_down.Draw("same")
        histo_nomi.Draw("same")

        Xaxis = histo_nomi.GetXaxis()
        Yaxis = histo_nomi.GetYaxis()
        if 'btag' in options.category and not 'nobtag' in options.category:
            Xaxis.SetRangeUser(20,4000)
        else:
            Xaxis.SetRangeUser(10,4000)
        Yaxis.SetTitle('N events (weighted)')
        pad.Update()
        
        integrals_infos[process][syst]['Up'] = round(histo_up.Integral(),2)
        Nb_events_infos[process][syst]['Up'] = histo_up.GetEntries()
        
        integrals_infos[process][syst]['Down'] = round(histo_down.Integral(),2)
        Nb_events_infos[process][syst]['Down'] = histo_down.GetEntries()
        
        integrals_infos[process][syst]['Nomi'] = round(histo_nomi.Integral(),2)
        Nb_events_infos[process][syst]['Nomi'] = histo_nomi.GetEntries()
        
        pave = ROOT.TPaveText(.75, .4, .925, .65, 'ndc')
        for typ in ['Up', 'Nomi', 'Down']:
            pave.AddText("int {}: {}".format(typ, integrals_infos[process][syst][typ]))
        for typ in ['Up', 'Nomi', 'Down']:
            pave.AddText("ent {}: {}".format(typ, Nb_events_infos[process][syst][typ]))
        pave.SetTextSizePixels(15)
        pave.SetTextAlign(11)
        pave.SetBorderSize(0)
        pave.SetFillColor(0)
        pave.SetFillStyle(0)
        pave.Draw()

        legend = ROOT.TLegend(.75,.7,.925,.9)
        legend.AddEntry(histo_up.GetName(), 'Up')
        legend.AddEntry(histo_nomi.GetName(), 'Nominal')
        legend.AddEntry(histo_down.GetName(), 'Down')
        legend.Draw()
        
        padr.cd()

        rhisto_down = copy.copy(histo_down)
        rhisto_up = copy.copy(histo_up)
        rhisto_down.Divide(histo_nomi)
        rhisto_up.Divide(histo_nomi)

        for b in range(histo_nomi.GetNbinsX()):
            rvalue_up = rhisto_up.GetBinContent(b+1)
            rvalue_down = rhisto_down.GetBinContent(b+1)
            if rvalue_up > integrals_max_ratios[process][syst]:
                integrals_max_ratios[process][syst] = rvalue_up
                integrals_max_ratios_err[process][syst] = rhisto_up.GetBinError(b+1)
            if rvalue_down > integrals_max_ratios[process][syst]:
                integrals_max_ratios[process][syst] = rvalue_down
                integrals_max_ratios_err[process][syst] = rhisto_down.GetBinError(b+1)
            if rvalue_up < integrals_min_ratios[process][syst] and rvalue_up > 0:
                integrals_min_ratios[process][syst] = rvalue_up
                integrals_min_ratios_err[process][syst] = rhisto_up.GetBinError(b+1)
            if rvalue_down < integrals_min_ratios[process][syst] and rvalue_down > 0:
                integrals_min_ratios[process][syst] = rvalue_down
                integrals_min_ratios_err[process][syst] = rhisto_down.GetBinError(b+1)

        rhisto_down.SetStats(0)
        rhisto_down.Draw()
        rhisto_up.Draw("same")

        ratioXaxis = rhisto_down.GetXaxis()
        ratioYaxis = rhisto_down.GetYaxis()
        if 'btag' in options.category and not 'nobtag' in options.category:
            ratioXaxis.SetRangeUser(20,4000)
        else:
            ratioXaxis.SetRangeUser(10,4000)
        ratioYaxis.SetRangeUser(.5,1.5)
        
        ratioXaxis.SetTitle('mT tot (GeV)')
        ratioXaxis.SetTitleSize(.1)
        
        ratioYaxis.SetTitle('Ratio / Nominal')
        ratioYaxis.SetTitleSize(.1)
        ratioYaxis.SetTitleOffset(0.5)
        
        ratioXaxis.SetMoreLogLabels()
        ratioXaxis.SetNoExponent()

        pad.SetLogx()
        padr.SetLogx()
        padr.Update()

        # legend = ROOT.TLegend(.75,.9,1,1)
        # legend.AddEntry('up_{}'.format(infos), 'Up/Nominal')
        # legend.AddEntry('do_{}'.format(infos), 'Down/Nominal')
        # legend.Draw()
        
        syst = syst.replace('CMS_htt_{}_{}_{}_13TeV__'.format(options.channel, options.channel, options.category),'')
        can.SaveAs("./shapes_ctrl_plots/{}/{}/{}_{}.png".format(options.channel, options.category, process, syst))

ratios = {'integrals':integrals_infos,'entries':Nb_events_infos}
for infos in ratios:
    can = ROOT.TCanvas('canratios_{}'.format(infos), '', 2000, 1500)
    pad = can.GetPad(0)
    
    # Set Pad sizes
    pad.SetPad(0.0, 0.32, 1., 1.0)
    
    pad.SetLeftMargin(.05)
    pad.SetBottomMargin(.5)
    pad.SetRightMargin(.01)
        
    can.cd()
    import locale; locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
    can.Draw()
    pad.Draw('same')
    
    pad.cd()
    
    binning = Nb_bins_for_infos
    histo_up = ROOT.TH1F('up_{}'.format(infos), 'Ratios of {}'.format(infos), *(binning,0,binning))
    histo_down = ROOT.TH1F('do_{}'.format(infos), 'Ratios of {}'.format(infos), *(binning,0,binning))
    
    histo_up.SetMarkerStyle(26)
    histo_down.SetMarkerStyle(24)
    histo_up.SetMarkerColor(styles.EWKcol)
    histo_up.SetLineColor(styles.EWKcol)
    histo_down.SetMarkerColor(styles.dycol)
    histo_down.SetLineColor(styles.dycol)
    
    bin = 0
    for process in ratios[infos]:
        for syst in ratios[infos][process]:
            bin += 1
            proc_syst = ratios[infos][process][syst]
            histo_up.SetBinContent(bin, proc_syst['Up']/proc_syst['Nomi'])
            histo_up.SetBinError(bin, proc_syst['Up']**(.5)/proc_syst['Nomi'])
            histo_up.GetXaxis().SetBinLabel(bin,'{} {}'.format(syst, process))
            histo_down.SetBinContent(bin, proc_syst['Down']/proc_syst['Nomi'])
            histo_down.SetBinError(bin, proc_syst['Down']**(.5)/proc_syst['Nomi'])
    histo_up.GetXaxis().SetLabelSize(0.025)
    histo_up.SetStats(0)
    histo_up.Draw()
    histo_down.Draw('same')

    legend = ROOT.TLegend(.75,.9,1,1)
    legend.AddEntry('up_{}'.format(infos), 'Up/Nominal')
    legend.AddEntry('do_{}'.format(infos), 'Down/Nominal')
    legend.Draw()
    
    can.SaveAs("./shapes_ctrl_plots/{}/{}/ratios_{}.png".format(options.channel, options.category, infos))

    
can = ROOT.TCanvas('canratios', '', 2000, 1500)
pad = can.GetPad(0)
    
# Set Pad sizes
pad.SetPad(0.0, 0.32, 1., 1.0)

pad.SetLeftMargin(.05)
pad.SetBottomMargin(.5)
pad.SetRightMargin(.01)
        
can.cd()
import locale; locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
can.Draw()
pad.Draw('same')

pad.cd()

binning = Nb_bins_for_infos
histo_max = ROOT.TH1F('max_vars'.format(infos), 'Relative variations', *(binning,0,binning))
histo_min = ROOT.TH1F('min_vars'.format(infos), '', *(binning,0,binning))

bin = 0
for process in integrals_max_ratios:
    for syst in integrals_max_ratios[process]:
        bin += 1
        histo_max.SetBinContent(bin, integrals_max_ratios[process][syst])
        histo_max.SetBinError(bin, integrals_max_ratios_err[process][syst])
        histo_min.SetBinContent(bin, integrals_min_ratios[process][syst])
        histo_min.SetBinError(bin, integrals_min_ratios_err[process][syst])
        histo_max.GetXaxis().SetBinLabel(bin,'{} {}'.format(syst, process))
    histo_max.GetXaxis().SetLabelSize(0.025)
    histo_max.GetYaxis().SetRangeUser(.5,1.5)
    histo_max.SetStats(0)
    histo_max.Draw()
    histo_min.Draw('same')

# legend = ROOT.TLegend(.75,.9,1,1)
# legend.AddEntry('up_{}'.format(infos), 'Up/Nominal')
# legend.AddEntry('do_{}'.format(infos), 'Down/Nominal')
# legend.Draw()

can.SaveAs("./shapes_ctrl_plots/{}/{}/relative_variations.png".format(options.channel, options.category))

    
data_file.Close()
