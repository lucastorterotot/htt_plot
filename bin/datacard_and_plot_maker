#!/usr/bin/env python
# -*- coding: utf-8 -*-

# options for script
from optparse import OptionParser
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-w", "--workers", dest = "workers",
                  default=10,
                  help='Number of workers to use for dask.')
parser.add_option("-c", "--cfg", dest = "cfg_name",
                  default="tt",
                  help='Name of the config file to use, must be in htt_plot/channels_configs/')
parser.add_option("-o", "--output", dest = "output_dir",
                  default="htt_postproc",
                  help='Output directory base name, channel is added')
parser.add_option("-C", "--category", dest = "category",
                  default="all",
                  help='Restric the category to process: inclusive, btag, nobtag, nobtag_tight, btag_tight, nobtag_loosemt, btag_loosemt...')
parser.add_option("-q", "--dryrun", dest = "dry_run",
                  default=False,
                  help='Disables dask computing.')
parser.add_option("-s", "--small", dest = "small_run",
                  default=False, action='store_true',
                  help='Use smaller variables and systematics list to test computing.')
parser.add_option("-p", dest = "just_plot",
                  default=False, action="store_true",
                  help='Do not produce datacards to save time.')
parser.add_option("-d", dest = "just_datacards",
                  default=False, action="store_true",
                  help='Do not produce plots to save time.')
parser.add_option("-m", dest = "mass_points_to_process",
                  default='[0]',
                  help='Mass points to process for signals.')
parser.add_option("-S", dest = "signals_only",
                  default=False, action="store_true",
                  help='Process only signals  in datacards')

(options,args) = parser.parse_args()

options.workers = int(options.workers)

if options.signals_only:
    options.just_datacards = True

cfg = __import__("htt_plot.channels_configs.{}".format(options.cfg_name), fromlist=[''])

# variables

if options.small_run:
    plot_variables = ['mt_tot', 'l1_mt']
    datacards_variables = [cfg.datacards_variables[0]]
else:
    plot_variables = cfg.variables
    datacards_variables = cfg.datacards_variables

variables = set(plot_variables + datacards_variables)
    
# output
output_dir = '_'.join([options.output_dir, cfg.channel])

# categories
categories_to_process = cfg.categories.keys()
categories_to_merge = cfg.merging_categories.keys()
valid_cats = [k for k in cfg.categories.keys()]+[k for k in cfg.merging_categories.keys()]

category = options.category # category must be inclusive, nobtag, btag, nobtag_tight, btag_tight, nobtag_loosemt or btag_loosemt
if category != 'all':
    if category not in valid_cats:
        raise ValueError('Category ({}) must be in {}'.format(category, valid_cats))
    elif category in categories_to_merge:
        categories_to_merge = [category]
        categories_to_process = merging_categories[category]
    elif category in categories_to_process:
        categories_to_merge = []
        categories_to_process = [category]

cut_signal = {}
basic_cuts = {}

import copy
for category in categories_to_process:
    cut_signal[category] = cfg.cut_signal & cfg.categories[category]
    basic_cuts[category] = cfg.basic_cuts & cfg.categories[category]

# mass points
mass_points = [80,90,110,120,130,180,250,300,400,450,600,800,900,1200,1400,1600,1800,2000,2300,2600,2900]#<=new working amcatnlo bbh mass points [80,100,110,120,130]#[80,100,110,120,130]#[140,180,200,250]#[300,400,450,600,700]#[800,900,1200,1400,1500]#[2300,2600,2900,3200]#90,350,1600,1800,2000#,,,

mass_points_to_process = [int(m) for m in options.mass_points_to_process[1:-1].split(',')]
mass_points = [m for m in mass_points if m in mass_points_to_process]

cfg.datasets.signal_datasets = cfg.datasets.build_signals(mass_points)
for sys, dataset_list in cfg.datasets.signal_datasets.iteritems() :
    for name, dataset in dataset_list.iteritems():
        dataset.compute_weight(cfg.datasets.data_lumi)

# dask tools
from dask import delayed, compute, visualize

# plotting tools
from htt_plot.tools.plotting.plotter import Plotter
from htt_plot.tools.plotting.tdrstyle import setTDRStyle
setTDRStyle(square=False)

# datacards tools
from htt_plot.tools.datacards import make_datacards

# cuts
from htt_plot.tools.cut import Cut

signal_region_Embed_nofakes = {}
signal_region_MC_nojetfakes_noembed_cut = {}
signal_region_signalMC_cut = {}
l1_FakeFactorApplication_Region_cut = {}
l2_FakeFactorApplication_Region_cut = {}
l1_FakeFactorApplication_Region_notjetfakes_cut = {}
l1_FakeFactorApplication_Region_notjetfakes_cut_embed = {}
l2_FakeFactorApplication_Region_notjetfakes_cut = {}
l2_FakeFactorApplication_Region_notjetfakes_cut_embed = {}

signal_region = {}
signal_region_Embedded_nofakes = {}
signal_region_MC_nofakes_noembed = {}
signal_region_signalMC = {}
l1_FakeFactorApplication_Region_data = {}
l2_FakeFactorApplication_Region_data = {}
l1_FakeFactorApplication_Region_notjetfakes_Embedded = {}
l2_FakeFactorApplication_Region_notjetfakes_Embedded = {}
l1_FakeFactorApplication_Region_notjetfakes_MC = {}
l2_FakeFactorApplication_Region_notjetfakes_MC = {}

for category in categories_to_process:
    signal_region_Embed_nofakes[category] = cut_signal[category] & cfg.cut_embed & cfg.cut_not_fakes
    signal_region_MC_nojetfakes_noembed_cut[category] = cut_signal[category] & cfg.cut_not_fakes_not_embed
    signal_region_signalMC_cut[category] = cut_signal[category]

    if cfg.channel == 'tt':
        l1_FakeFactorApplication_Region_cut[category] = basic_cuts[category] & cfg.cuts_iso['l1_VLoose'] & ~cfg.cuts_iso['l1_Tight'] & cfg.cuts_iso['l2_Tight']
        l2_FakeFactorApplication_Region_cut[category] = basic_cuts[category] & cfg.cuts_iso['l2_VLoose'] & ~cfg.cuts_iso['l2_Tight'] & cfg.cuts_iso['l1_Tight']
    else:
        l1_FakeFactorApplication_Region_cut[category] = Cut('0')
        l2_FakeFactorApplication_Region_cut[category] = basic_cuts[category] & cfg.cuts_iso['l2_VLoose'] & ~cfg.cuts_iso['l2_Tight']
    
    l1_FakeFactorApplication_Region_notjetfakes_cut[category] = l1_FakeFactorApplication_Region_cut[category] & ~cfg.cut_l1_fakejet & cfg.cut_not_embed
    l1_FakeFactorApplication_Region_notjetfakes_cut_embed[category] = l1_FakeFactorApplication_Region_cut[category] & ~cfg.cut_l1_fakejet & cfg.cut_embed
    
    l2_FakeFactorApplication_Region_notjetfakes_cut[category] = l2_FakeFactorApplication_Region_cut[category] & ~cfg.cut_l2_fakejet & cfg.cut_not_embed
    l2_FakeFactorApplication_Region_notjetfakes_cut_embed[category] = l2_FakeFactorApplication_Region_cut[category] & ~cfg.cut_l2_fakejet & cfg.cut_embed

    #### cuts+weights
    signal_region[category] = cut_signal[category] * cfg.weights['weight']
    signal_region_Embedded_nofakes[category] = signal_region_Embed_nofakes[category] * cfg.weights['embed']
    signal_region_MC_nofakes_noembed[category] = signal_region_MC_nojetfakes_noembed_cut[category] * cfg.weights['weight'] * cfg.weights['MC']
    signal_region_signalMC[category] = signal_region_signalMC_cut[category] * cfg.weights['weight'] * cfg.weights['MC']
    
    l1_FakeFactorApplication_Region_data[category] = l1_FakeFactorApplication_Region_cut[category] * cfg.weights['l1_fake'] * cfg.weights['weight']
    l2_FakeFactorApplication_Region_data[category] = l2_FakeFactorApplication_Region_cut[category] * cfg.weights['l2_fake'] * cfg.weights['weight']
    
    l1_FakeFactorApplication_Region_notjetfakes_Embedded[category] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed'] * cfg.weights['l1_fake']
    l2_FakeFactorApplication_Region_notjetfakes_Embedded[category] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed'] * cfg.weights['l2_fake']
    
    l1_FakeFactorApplication_Region_notjetfakes_MC[category] = l1_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * cfg.weights['l1_fake']
    l2_FakeFactorApplication_Region_notjetfakes_MC[category] = l2_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * cfg.weights['l2_fake']

from htt_plot.systematics import sys_dict_samples
if options.small_run:
    sys_dict_samples = {
        sys_dict_samples.items()[0][0] : sys_dict_samples.items()[0][1]
    }

for category in categories_to_process:
    for key, item in sys_dict_samples.iteritems():
        if 'signal' in item['processes']:
            item['signal_cut-{}'.format(category)] = signal_region_signalMC[category]
        if 'H125' in item['processes']:
            item['H125_cut-{}'.format(category)] = signal_region_signalMC[category]
        if 'DY' in item['processes']:
            item['DY_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]
            item['DY_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_MC[category]
            item['DY_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_MC[category]
        if 'TT' in item['processes']:
            item['TT_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]
            item['TT_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_MC[category]
            item['TT_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_MC[category]
        if any([proc in item['processes'] for proc in ['all_MC','W']]):
            item['bkg_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]
            item['bkg_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_MC[category]
            item['bkg_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_MC[category]
        if 'Embedded' in item['processes']:
            item['Embedded_cut-{}'.format(category)] = signal_region_Embedded_nofakes[category]
            item['Embedded_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_Embedded[category]
            item['Embedded_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_Embedded[category]
            if key=='Embedding_tracking_1prong_up':
                item['Embedded_cut-{}'.format(category)] = signal_region_Embed_nofakes[category] * cfg.weights['embed_track_1prong_up']
                item['Embedded_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_1prong_up'] * cfg.weights['l1_fake']
                item['Embedded_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_1prong_up'] * cfg.weights['l2_fake']
            if key=='Embedding_tracking_1prong_down':
                item['Embedded_cut-{}'.format(category)] = signal_region_Embed_nofakes[category] * cfg.weights['embed_track_1prong_down']
                item['Embedded_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_1prong_down'] * cfg.weights['l1_fake']
                item['Embedded_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_1prong_down'] * cfg.weights['l2_fake']
            if key=='Embedding_tracking_3prong_up':
                item['Embedded_cut-{}'.format(category)] = signal_region_Embed_nofakes[category] * cfg.weights['embed_track_3prong_up']
                item['Embedded_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_3prong_up'] * cfg.weights['l1_fake']
                item['Embedded_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_3prong_up'] * cfg.weights['l2_fake']
            if key=='Embedding_tracking_3prong_down':
                item['Embedded_cut-{}'.format(category)] = signal_region_Embed_nofakes[category] * cfg.weights['embed_track_3prong_down']
                item['Embedded_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_3prong_down'] * cfg.weights['l1_fake']
                item['Embedded_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed_track_3prong_down'] * cfg.weights['l2_fake']

if options.small_run:
    up_downs = ['up','down']
    systs_ff_list = []#['qcd_syst_{}']
else:
    up_downs = ['up','down']
    systs_ff_list = ['qcd_syst_{}','qcd_dm0_njet0_stat_{}','qcd_dm0_njet1_stat_{}','w_syst_{}','tt_syst_{}']
    if cfg.channel in ['et', 'mt']:
        systs_ff_list += ['w_dm0_njet0_stat_{}', 'w_dm0_njet1_stat_{}', 'tt_dm0_njet0_stat_{}', 'tt_dm0_njet1_stat_{}']
    if cfg.channel in ['tt']:
        systs_ff_list += ['w_frac_syst_{}', 'tt_frac_syst_{}']
        
    
sys_dict_weights = {}

if cfg.channel == 'tt':
    l1_fakeweight_sys_str = '0.5*l1_fakeweight_{}'
    l2_fakeweight_sys_str = '0.5*l2_fakeweight_{}'
else:
    l1_fakeweight_sys_str = '1.0'
    l2_fakeweight_sys_str = 'l2_fakeweight_{}'

for up_down in up_downs:
    for syst in systs_ff_list:
        sys_name = 'ff_{}'.format(syst.format(up_down))
        cfg.datasets.DY_datasets[sys_name] = cfg.datasets.DY_datasets['nominal']
        cfg.datasets.TT_datasets[sys_name] = cfg.datasets.TT_datasets['nominal']
        cfg.datasets.Diboson_datasets[sys_name] = cfg.datasets.Diboson_datasets['nominal']
        cfg.datasets.EWK_datasets[sys_name] = cfg.datasets.Diboson_datasets['nominal']
        cfg.datasets.singleTop_datasets[sys_name] = cfg.datasets.singleTop_datasets['nominal']
        cfg.datasets.WJ_datasets[sys_name] = cfg.datasets.WJ_datasets['nominal']
        cfg.datasets.Embedded_datasets[sys_name] = cfg.datasets.Embedded_datasets['nominal']
        cfg.datasets.signal_datasets[sys_name] = cfg.datasets.signal_datasets['nominal']
        cfg.datasets.H125_datasets[sys_name] = cfg.datasets.H125_datasets['nominal']
        sys_dict_weights[sys_name] = {}
        sys_dict_weights[sys_name]['processes'] = ['all_MC','Embedded','data']
        for category in categories_to_process:
            sys_dict_weights[sys_name]['signal_cut-{}'.format(category)] = signal_region_signalMC[category]
            sys_dict_weights[sys_name]['H125_cut-{}'.format(category)] = signal_region_signalMC[category]
            sys_dict_weights[sys_name]['DY_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]
            sys_dict_weights[sys_name]['DY_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['DY_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['TT_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]
            sys_dict_weights[sys_name]['TT_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['TT_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['bkg_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]
            sys_dict_weights[sys_name]['bkg_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['bkg_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut[category] * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['Embedded_cut-{}'.format(category)] = signal_region_Embedded_nofakes[category]
            sys_dict_weights[sys_name]['Embedded_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['Embedded_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed[category] * cfg.weights['embed'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_cut[category] * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down)))
            sys_dict_weights[sys_name]['l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_cut[category] * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down)))
                                      
    sys_dict_weights['top_pt_reweighting_{}'.format(up_down)] = {}
    sys_dict_weights['top_pt_reweighting_{}'.format(up_down)]['processes'] = ['TT']
    for category in categories_to_process:
        sys_dict_weights['top_pt_reweighting_{}'.format(up_down)]['TT_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]*cfg.weights['TT_pTrweigh_{}'.format(up_down)]
        sys_dict_weights['top_pt_reweighting_{}'.format(up_down)]['TT_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_MC[category] *cfg.weights['TT_pTrweigh_{}'.format(up_down)]
        sys_dict_weights['top_pt_reweighting_{}'.format(up_down)]['TT_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_MC[category] *cfg.weights['TT_pTrweigh_{}'.format(up_down)]
    cfg.datasets.TT_datasets['top_pt_reweighting_{}'.format(up_down)] = cfg.datasets.TT_datasets['nominal']

    sys_dict_weights['dy_pt_reweighting_{}'.format(up_down)] = {}
    sys_dict_weights['dy_pt_reweighting_{}'.format(up_down)]['processes'] = ['DY']
    for category in categories_to_process:
        sys_dict_weights['dy_pt_reweighting_{}'.format(up_down)]['DY_cut-{}'.format(category)] = signal_region_MC_nofakes_noembed[category]*cfg.weights['DY_pTrweigh_{}'.format(up_down)]
        sys_dict_weights['dy_pt_reweighting_{}'.format(up_down)]['DY_l1fakecut-{}'.format(category)] = l1_FakeFactorApplication_Region_notjetfakes_MC[category] * cfg.weights['DY_pTrweigh_{}'.format(up_down)]
        sys_dict_weights['dy_pt_reweighting_{}'.format(up_down)]['DY_l2fakecut-{}'.format(category)] = l2_FakeFactorApplication_Region_notjetfakes_MC[category] * cfg.weights['DY_pTrweigh_{}'.format(up_down)]
    cfg.datasets.DY_datasets['dy_pt_reweighting_{}'.format(up_down)] = cfg.datasets.DY_datasets['nominal']
    
for key, item in sys_dict_weights.iteritems():
    if 'signal' in item['processes']:
        item['processes'].extend(['H125'])
    if 'all_MC' in item['processes']:
        item['processes'].extend(['DY','TT','Diboson','singleTop','W','signal','EWK','H125'])
    if 'DY' in item['processes']:
        item['processes'].extend(['ZJ','ZLL','ZTT','ZL'])
    if 'TT' in item['processes']:
        item['processes'].extend(['TTT','TTL','TTJ'])
    if 'Diboson' in item['processes'] and 'singleTop' in item['processes']:
        item['processes'].extend(['VV','VVL','VVT','VVJ'])
        
sys_dict = sys_dict_samples.copy()
sys_dict.update(sys_dict_weights)
    

#########
# Cfgs and components
#########

from htt_plot.tools.builder import build_cfgs, merge
from htt_plot.tools.builder import  merge_components as merge_comps
from htt_plot.tools.utils import add_processes_per_component, add_simple_process

cfg_dict = {}
dc_comps = {}
ff_fracs_comps = {}
components = {}
for variable in variables:
    bins = cfg.bins[variable]
    cfg_dict[variable] = {}
    dc_comps[variable] = {}
    ff_fracs_comps[variable] = {}
    components[variable] = {}
    for category in categories_to_process:
        cfg_dict[variable][category] = {}
        dc_comps[variable][category] = {}
        ff_fracs_comps[variable][category] = {}
        cfg_dict[variable][category]['nominal'] = {}
        cfgs = cfg_dict[variable][category]['nominal'] # for lighter syntax

        #signal
        for mass in mass_points:#,'300','400',,'700','800','900'
            add_simple_process(cfgs,'ggH{}'.format(mass),cfg.datasets.signal_datasets['nominal']['ggH{}'.format(mass)],variable,signal_region_signalMC[category],bins)
            add_simple_process(cfgs,'bbH{}'.format(mass),cfg.datasets.signal_datasets['nominal']['bbH{}'.format(mass)],variable,signal_region_signalMC[category],bins)

        for H125proc in cfg.datasets.H125_datasets['nominal']:
            add_simple_process(cfgs,H125proc,cfg.datasets.H125_datasets['nominal'][H125proc],variable,signal_region_signalMC[category],bins)
        if 'HiggsGGH125_ext' in cfg.datasets.H125_datasets['nominal']:
            cfgs['HiggsGGH125'] = merge('HiggsGGH125',[cfgs['HiggsGGH125'],cfgs['HiggsGGH125_ext']])
            cfgs.pop('HiggsGGH125_ext')
    
        #DY
        add_processes_per_component(cfgs,
                                'DY',
                                ['ZTT','ZL','ZJ'],
                                cfg.datasets.DY_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed[category],#signal_region_MC_nofakes_DY,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC[category],#l1_FakeFactorApplication_Region_notjetfakes_DY,
                                l2_FakeFactorApplication_Region_notjetfakes_MC[category],#l2_FakeFactorApplication_Region_notjetfakes_DY,
                                bins,
                                mergedict = {'ZLL':['ZL','ZJ'],
                                             'DY':['ZLL','ZTT']})

        #TT
        add_processes_per_component(cfgs,
                                'TT',
                                ['TTT','TTJ','TTL'],
                                cfg.datasets.TT_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed[category],#signal_region_MC_nofakes_TT,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC[category],#l1_FakeFactorApplication_Region_notjetfakes_TT,
                                l2_FakeFactorApplication_Region_notjetfakes_MC[category],#l2_FakeFactorApplication_Region_notjetfakes_TT,
                                bins,
                                mergedict = {'TT':['TTT','TTJ']})

        #Diboson
        add_processes_per_component(cfgs,
                                'Diboson',
                                ['Diboson_VVT','Diboson_VVJ','Diboson_VVL'],
                                cfg.datasets.Diboson_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed[category],#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC[category],#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC[category],#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'Diboson':['Diboson_VVT','Diboson_VVJ']})
    
        #EWK
        add_processes_per_component(cfgs,
                                'EWK',
                                ['EWK_VVT','EWK_VVJ','EWK_VVL'],
                                cfg.datasets.EWK_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed[category],#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC[category],#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC[category],#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'EWK':['EWK_VVT','EWK_VVJ']})

        #singleTop
        add_processes_per_component(cfgs,
                                'singleTop',
                                ['singleTop_VVT','singleTop_VVJ','singleTop_VVL'],
                                cfg.datasets.singleTop_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed[category],#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC[category],#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC[category],#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'singleTop':['singleTop_VVT','singleTop_VVJ']})
    
        #VV
        cfgs['VVL'] = merge('VVL', [cfgs['Diboson_VVL'],cfgs['singleTop_VVL'],cfgs['EWK_VVL']])
        cfgs['VVT'] = merge('VVT', [cfgs['Diboson_VVT'],cfgs['singleTop_VVT'],cfgs['EWK_VVT']])
        cfgs['VVJ'] = merge('VVJ', [cfgs['Diboson_VVJ'],cfgs['singleTop_VVJ'],cfgs['EWK_VVJ']])
        cfgs['VV'] = merge('VV', [cfgs['VVJ'],cfgs['VVT']])
    
        #W
        add_processes_per_component(cfgs,
                                'W',
                                ['WJ'],
                                cfg.datasets.WJ_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed[category],#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC[category],#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC[category],#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'W':['WJ']})
    
        # data
        add_processes_per_component(cfgs,
                                'data_obs',
                                ['data'],
                                cfg.datasets.data_datasets,
                                variable,
                                signal_region[category],
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_data[category],#l1_FakeFactorApplication_Region,
                                l2_FakeFactorApplication_Region_data[category],#l2_FakeFactorApplication_Region,
                                bins,
                                mergedict = {'data_obs':['data']})
        
        # Embedded
        add_processes_per_component(cfgs,
                                'Embedded',
                                ['embed'],
                                cfg.datasets.Embedded_datasets['nominal'],
                                variable,
                                signal_region_Embedded_nofakes[category],#signal_region_Embedded,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_Embedded[category],#l1_FakeFactorApplication_Region_notjetfakes_Embedded,
                                l2_FakeFactorApplication_Region_notjetfakes_Embedded[category],#l2_FakeFactorApplication_Region_notjetfakes_Embedded,
                                bins,
                                mergedict = {'Embedded':['embed']})

        # fakes
        cfgs['fakes'] = merge('fakes', [cfgs['fakes_data_obs'],
                                    cfgs['fakes_DY'],
                                    cfgs['fakes_TT'],
                                    cfgs['fakes_Diboson'],
                                    cfgs['fakes_EWK'],
                                    cfgs['fakes_singleTop'],
                                    cfgs['fakes_W'],
                                    cfgs['fakes_Embedded']])

        
        components[variable][category] = {
            'DY' : cfgs['DY'],
            'TT' : cfgs['TT'],
            'singleTop' : cfgs['singleTop'],
            'Diboson' : cfgs['Diboson'],
            'EWK' : cfgs['EWK'],
            'W' : cfgs['W'],
            'data_obs' : cfgs['data_obs'],
            'Embedded' : cfgs['Embedded'],
            'fakes' : cfgs['fakes']
        }

        dc_comps[variable][category]['nominal'] = {
            'ZL' : cfgs['ZL'],
            'TTL' : cfgs['TTL'],
            'VVL' : cfgs['VVL'],
            'jetFakes' : cfgs['fakes'],
            'data_obs' : cfgs['data_obs'],
            'Embedded' : cfgs['Embedded'],
            'ZTT' : cfgs['ZTT'],
            'ZJ' : cfgs['ZJ'],
            'TTT' : cfgs['TTT'],
            'TTJ' : cfgs['TTJ'],
            'VVT' : cfgs['VVT'],
            'VVJ' : cfgs['VVJ'],
            'W' : cfgs['W']
        }
        
        for _H125 in cfg.datasets.H125_Nevts:
            if _H125[-4:] != '_ext':
                dc_comps[variable][category]['nominal'][_H125] = cfgs[_H125]
        for mass in mass_points:
            dc_comps[variable][category]['nominal']['ggH{}'.format(mass)] = cfgs['ggH{}'.format(mass)]
            dc_comps[variable][category]['nominal']['bbH{}'.format(mass)] = cfgs['bbH{}'.format(mass)]

        ff_fracs_comps[variable][category]['nominal'] = {}
        for comp_name in dc_comps[variable][category]['nominal']:
            ff_fracs_comps[variable][category]['nominal'][comp_name] = dc_comps[variable][category]['nominal'][comp_name]
            if "fakes_{}".format(comp_name) in cfgs.keys():
                ff_fracs_comps[variable][category]['nominal']["fakes_{}".format(comp_name)] = cfgs["fakes_{}".format(comp_name)]

# systematics
for variable in datacards_variables:
    bins = cfg.bins[variable]
    for category in categories_to_process:
        for sys in sys_dict:
            cfg_dict[variable][category][sys] = copy.copy(cfg_dict[variable][category]['nominal'])
            cfgs = cfg_dict[variable][category][sys] # for lighter syntax

            #signal
            if 'signal' in sys_dict[sys]['processes']:
                for mass in mass_points:
                    add_simple_process(cfgs,'ggH{}'.format(mass),cfg.datasets.signal_datasets[sys]['ggH{}'.format(mass)],variable,sys_dict[sys]['signal_cut-{}'.format(category)],bins)
                    add_simple_process(cfgs,'bbH{}'.format(mass),cfg.datasets.signal_datasets[sys]['bbH{}'.format(mass)],variable,sys_dict[sys]['signal_cut-{}'.format(category)],bins)

            if 'H125' in sys_dict[sys]['processes']:
                for H125proc in cfg.datasets.H125_datasets[sys]:
                    add_simple_process(cfgs,H125proc,cfg.datasets.H125_datasets[sys][H125proc],variable,signal_region_signalMC[category],bins)
                if 'HiggsGGH125_ext' in cfg.datasets.H125_datasets['nominal']:
                    cfgs['HiggsGGH125'] = merge('HiggsGGH125',[cfgs['HiggsGGH125'],cfgs['HiggsGGH125_ext']])
                    cfgs.pop('HiggsGGH125_ext')
    
            #DY
            if 'DY' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'DY',
                                        ['ZTT','ZL','ZJ'],
                                        cfg.datasets.DY_datasets[sys],
                                        variable,
                                        sys_dict[sys]['DY_cut-{}'.format(category)],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['DY_l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['DY_l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'ZLL':['ZL','ZJ'],
                                                     'DY':['ZLL','ZTT']})
        
            #TT
            if 'TT' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'TT',
                                        ['TTT','TTJ'],
                                        cfg.datasets.TT_datasets[sys],
                                        variable,
                                        sys_dict[sys]['TT_cut-{}'.format(category)],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['TT_l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['TT_l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'TT':['TTT','TTJ']})
        
            #Diboson
            if 'Diboson' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'Diboson',
                                        ['Diboson_VVT','Diboson_VVJ'],
                                        cfg.datasets.Diboson_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut-{}'.format(category)],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['bkg_l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'Diboson':['Diboson_VVT','Diboson_VVJ']})
        
            #EWK
            if 'EWK' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'EWK',
                                        ['EWK_VVT','EWK_VVJ'],
                                        cfg.datasets.EWK_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut-{}'.format(category)],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['bkg_l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'EWK':['EWK_VVT','EWK_VVJ']})

            #singleTop
            if 'singleTop' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'singleTop',
                                        ['singleTop_VVT','singleTop_VVJ'],
                                        cfg.datasets.singleTop_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut-{}'.format(category)],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['bkg_l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'singleTop':['singleTop_VVT','singleTop_VVJ']})
    
            #VV
            if any([name in sys_dict[sys]['processes'] for name in ['Diboson','singleTop','EWK']]):
                cfgs['VVT'] = merge('VVT', [cfgs['Diboson_VVT'],cfgs['singleTop_VVT'],cfgs['EWK_VVT']])
                cfgs['VVJ'] = merge('VVJ', [cfgs['Diboson_VVJ'],cfgs['singleTop_VVJ'],cfgs['EWK_VVJ']])
                cfgs['VV'] = merge('VV', [cfgs['VVJ'],cfgs['VVT']])
    
            #W
            if 'W' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'W',
                                        ['WJ'],
                                        cfg.datasets.WJ_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut-{}'.format(category)],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['bkg_l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'W':['WJ']})
    
            # data
            if 'data' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'data_obs',
                                        ['data'],
                                        cfg.datasets.data_datasets,
                                        variable,
                                        signal_region[category],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'data_obs':['data']})
        
            # Embedded
            if 'Embedded' in sys_dict[sys]['processes']:
                add_processes_per_component(cfgs,
                                        'Embedded',
                                        ['embed'],
                                        cfg.datasets.Embedded_datasets[sys],
                                        variable,
                                        sys_dict[sys]['Embedded_cut-{}'.format(category)],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['Embedded_l1fakecut-{}'.format(category)],
                                        sys_dict[sys]['Embedded_l2fakecut-{}'.format(category)],
                                        bins,
                                        mergedict = {'Embedded':['embed']})

            # fakes
            if any([name in sys_dict[sys]['processes'] for name in ['data_obs','DY','TT','Diboson','singleTop','W','Embedded','EWK']]):
                cfgs['fakes'] = merge('fakes', [cfgs['fakes_data_obs'],
                                            cfgs['fakes_DY'],
                                            cfgs['fakes_TT'],
                                            cfgs['fakes_Diboson'],
                                            cfgs['fakes_EWK'],
                                            cfgs['fakes_singleTop'],
                                            cfgs['fakes_W'],
                                            cfgs['fakes_Embedded']])


            dc_comps[variable][category][sys] = {'jetFakes' : cfgs['fakes']}
            if not ('ff_' in sys) or True:
                for process in sys_dict[sys]['processes']:
                    if process == 'H125':
                        for _H125 in cfg.datasets.H125_Nevts:
                            if _H125[-4:] != '_ext':
                                dc_comps[variable][category][sys][_H125] = cfgs[_H125]
                    if process in ['ZL','TTL','VVL','Embedded']:
                        dc_comps[variable][category][sys][process] = cfgs[process]
                    elif cfg.channel in ['mt', 'et'] and process in ['ZTT', 'ZJ', 'TTT', 'TTJ', 'VVT', 'VVJ', 'W']:
                        dc_comps[variable][category][sys][process] = cfgs[process]
                    if process == 'signal':
                        for mass in mass_points:#,'300','400',,'700','800','900'
                            dc_comps[variable][category][sys]['ggH{}'.format(mass)] = cfgs['ggH{}'.format(mass)]
                            dc_comps[variable][category][sys]['bbH{}'.format(mass)] = cfgs['bbH{}'.format(mass)]
                
            # dc_comps[variable][sys] = {
            #     'ZTT' : cfgs['ZTT'],
            #     'ZL' : cfgs['ZL'],
            #     'ZJ' : cfgs['ZJ'],
            #     'ZLL' : cfgs['ZLL'],
            #     'TTT' : cfgs['TTT'],
            #     'TTJ' : cfgs['TTJ'],
            #     'TT' : cfgs['TT'],
            #     'VVT' : cfgs['VVT'],
            #     'VVJ' : cfgs['VVJ'],
            #     'VV' : cfgs['VV'],
            #     'W' : cfgs['W'],
            #     'Embedded' : cfgs['Embedded'],
            #     'ggH200' : cfgs['ggH200']
            # }

            ff_fracs_comps[variable][category][sys] = {}
            for comp_name in dc_comps[variable][category][sys]:
                ff_fracs_comps[variable][category][sys][comp_name] = dc_comps[variable][category][sys][comp_name]
                if "fakes_{}".format(comp_name) in cfgs.keys():
                    ff_fracs_comps[variable][category][sys]["fakes_{}".format(comp_name)] = cfgs["fakes_{}".format(comp_name)]

#### merging categories
for category in categories_to_merge:
    # dc_comp, ff_fracs_comps and components
    to_merge = cfg.merging_categories[category]
    for variable in datacards_variables:
        dc_comps[variable][category] = {}
        for sys in dc_comps[variable][to_merge[0]]:
            dc_comps[variable][category][sys] = {}
            for comp in dc_comps[variable][to_merge[0]][sys]:
                dc_comps[variable][category][sys][comp] = merge(comp, [dc_comps[variable][c][sys][comp] for c in to_merge])
    for variable in ff_fracs_comps.keys():
        ff_fracs_comps[variable][category] = {}
        for sys in ff_fracs_comps[variable][to_merge[0]]:
            ff_fracs_comps[variable][category][sys] = {}
            for comp in ff_fracs_comps[variable][to_merge[0]][sys]:
                ff_fracs_comps[variable][category][sys][comp] = merge(comp, [ff_fracs_comps[variable][c][sys][comp] for c in to_merge])
    for variable in plot_variables:
        components[variable][category] = {}
        for comp in components[variable][to_merge[0]]:
            components[variable][category][comp] = merge(comp, [components[variable][c][comp] for c in to_merge])

#### rebinning
# categories_end_binning = {}
# for category in categories_to_process+categories_to_merge:
#     categories_end_binning[category] = copy.copy(cfg.bins)
#     variable = 'mt_tot'
#     if 'btag' in category and 'nobtag' not in category:
#         from array import array
#         categories_end_binning[category][variable] = (17, array('d',[0,20,40,60,80,100,120,140,160,180,200,250,300,350,400,500,700,4000]))
#         dc_comps[variable][category] = copy.copy(dc_comps[variable][category])
#         components[variable][category] = copy.copy(components[variable][category])
#         cfg_dict[variable][category] = copy.copy(cfg_dict[variable][category])
#         for sys in cfg_dict[variable][category]:
#             for comp in cfg_dict[variable][category][sys]:
#                 import pdb; pdb.set_trace()
#                 cfg_dict[variable][category][sys][comp] = categories_end_binning[category][variable]
            

processes = []

channel_strings_for_plot = {
    'tt' : '#tauh#tauh',
    'mt' : '#mu#tauh',
    'et' : '#ele#tauh',
    }

def write_plots(plotter, variable, output_dir, category):
    varname = cfg.var_name_dict[variable] if variable in cfg.var_name_dict else variable
    x_range = None
    if varname == 'mt_tot':
        x_range = [10,4000]
        if 'btag' in category and not 'nobtag' in category :
            x_range = [20,4000]
    plotter.draw(
        varname,
        'N events',
        category = category,
        channel_str = channel_strings_for_plot[cfg.channel],
        blind = (cfg.channel not in ['tt']),
        x_range = x_range,
        NormalizeToBinWidth = False,
        set_log_x  = (varname == 'mt_tot'))
    plotter.write('{}/{}/{}.png'.format(output_dir, category, varname))
    plotter.write('{}/{}/{}.pdf'.format(output_dir, category, varname))
    plotter.write('{}/{}/{}.tex'.format(output_dir, category, varname))
    plotter.write('{}/{}/{}.root'.format(output_dir, category, varname))
    print(plotter.plot)

if options.signals_only:
    for variable in dc_comps:
        for category in dc_comps[variable]:
            for sys in dc_comps[variable][category]:
                to_pop = []
                for cfg_process in dc_comps[variable][category][sys]:
                    if cfg_process[:3] not in ['ggH', 'bbH']:
                        to_pop.append(cfg_process)
                for cfg_process in to_pop:
                    dc_comps[variable][category][sys].pop(cfg_process)

if not options.just_datacards:
    for variable in plot_variables:
        for category in components[variable]:
            processes.append(
                delayed(write_plots)(
                    delayed(Plotter)([c for c in components[variable][category].values()], cfg.datasets.data_lumi, cfg.channel),
                    variable,
                    output_dir,
                    category,
                )
            )

if not options.just_plot:
    for variable in datacards_variables:
        processes.append(
            delayed(make_datacards)(
                output_dir,
                cfg.channel,
                variable,
                dc_comps[variable],
                systematics = ['nominal']+sys_dict.keys()
            )
        )
    from htt_plot.tools.ff_fractions import make_fractions
    processes.append(
        delayed(make_fractions)(
            output_dir,
            cfg.channel,
            ff_fracs_comps
            )
        )
            

import os
for category in categories_to_process+categories_to_merge:
    os.system('mkdir -p {}/{}'.format(output_dir,category))
        
#visualize(*processes)
#import pdb; pdb.set_trace()
if not options.dry_run:
    compute(*processes, num_workers=options.workers, scheduler='processes')
