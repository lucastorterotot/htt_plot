#!/usr/bin/env python
# -*- coding: utf-8 -*-

# options for script
from optparse import OptionParser
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-c", "--cfg", dest = "cfg_name",
                  default="tt",
                  help='Name of the config file to use, must be in htt_plot/channels_configs/')
parser.add_option("-o", "--output", dest = "output_dir",
                  default="delayed_plots",
                  help='Output directory base name, channel is added')
parser.add_option("-C", "--category", dest = "category",
                  default="inclusive",
                  help='Category to process: inclusive, btag, nobtag.')
parser.add_option("-q", "--dryrun", dest = "dry_run",
                  default=False,
                  help='Disables dask computing.')
parser.add_option("-s", "--small", dest = "small_run",
                  default=False, action='store_true',
                  help='Use smaller variables and systematics list to test computing.')
parser.add_option("-p", dest = "just_plot",
                  default=False, action="store_true",
                  help='Do not produce datacards to save time.')

(options,args) = parser.parse_args()

cfg = __import__("htt_plot.channels_configs.{}".format(options.cfg_name), fromlist=[''])

# variables

if options.small_run:
    plot_variables = ['mt_tot']
    datacards_variables = [cfg.datacards_variables[0]]
else:
    plot_variables = cfg.variables
    datacards_variables = cfg.datacards_variables

variables = set(plot_variables + datacards_variables)
    
# output
output_dir = '_'.join([options.output_dir, cfg.channel])

# category
category = options.category # 'nobtag'#'nobtag','btag','inclusive'
if category == 'inclusive':
    cut_signal = cfg.cut_signal
    basic_cuts =  cfg.basic_cuts
elif category == 'nobtag':
    from array import array
    cfg.bins['mt_tot'] = (33, array('d',[0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,225,250,275,300,325,350,400,500,600,700,800,900,4000]))
    cut_signal = cfg.cut_signal_nobtag
    basic_cuts =  cfg.basic_cuts_nobtag
elif category == 'btag':
    # from array import array
    # cfg.bins['mt_tot'] = (16, array('d',[0,20,40,60,80,100,120,140,160,180,200,250,300,350,400,500,4000]))
    cut_signal = cfg.cut_signal_btag
    basic_cuts =  cfg.basic_cuts_btag
else:
    raise ValueError('category must be inclusive, nobtag or btag')

# mass points

if cfg.channel in ['mt', 'et']:
    mass_points = [100,110,120,130]
else:
    mass_points = [80,90,110,120,130,180,250,300,400,450,600,800,900,1200,1400,1600,1800,2000,2300,2600,2900]#<=new working amcatnlo bbh mass points [80,100,110,120,130]#[80,100,110,120,130]#[140,180,200,250]#[300,400,450,600,700]#[800,900,1200,1400,1500]#[2300,2600,2900,3200]#90,350,1600,1800,2000#,,,

cfg.datasets.signal_datasets = cfg.datasets.build_signals(mass_points)
for sys, dataset_list in cfg.datasets.signal_datasets.iteritems() :
    for name, dataset in dataset_list.iteritems():
        dataset.compute_weight(cfg.datasets.data_lumi)

# dask tools
from dask import delayed, compute, visualize

# plotting tools
from htt_plot.tools.plotting.plotter import Plotter
from htt_plot.tools.plotting.tdrstyle import setTDRStyle
setTDRStyle(square=False)

# datacards tools
from htt_plot.tools.datacards import make_datacards

# cuts
# signal_region_Embed_nofakes = cut_signal & cfg.cut_embed & cfg.cut_not_fakes
signal_region_Embed_nofakes = cut_signal & cfg.cut_embed & cfg.cut_not_fakes & cfg.cut_not_embed
# signal_region_MC_nojetfakes_noembed_cut = cut_signal & cfg.cut_not_fakes_not_embed
signal_region_MC_nojetfakes_noembed_cut = cut_signal & cfg.cut_not_fakes
signal_region_signalMC_cut = cut_signal

from htt_plot.tools.cut import Cut

if cfg.channel == 'tt':
    l1_FakeFactorApplication_Region_cut = basic_cuts & cfg.cuts_iso['l1_VLoose'] & ~cfg.cuts_iso['l1_Tight'] & cfg.cuts_iso['l2_Tight']
    l2_FakeFactorApplication_Region_cut = basic_cuts & cfg.cuts_iso['l2_VLoose'] & ~cfg.cuts_iso['l2_Tight'] & cfg.cuts_iso['l1_Tight']
else:
    l1_FakeFactorApplication_Region_cut = Cut('0')
    l2_FakeFactorApplication_Region_cut = basic_cuts & cfg.cuts_iso['l2_VLoose'] & ~cfg.cuts_iso['l2_Tight']
    
l1_FakeFactorApplication_Region_notjetfakes_cut = l1_FakeFactorApplication_Region_cut & ~cfg.cut_l1_fakejet & cfg.cut_not_embed
l1_FakeFactorApplication_Region_notjetfakes_cut_embed = l1_FakeFactorApplication_Region_cut & ~cfg.cut_l1_fakejet & cfg.cut_embed

l2_FakeFactorApplication_Region_notjetfakes_cut = l2_FakeFactorApplication_Region_cut & ~cfg.cut_l2_fakejet & cfg.cut_not_embed
l2_FakeFactorApplication_Region_notjetfakes_cut_embed = l2_FakeFactorApplication_Region_cut & ~cfg.cut_l2_fakejet & cfg.cut_embed

#### cuts+weights
signal_region = cut_signal * cfg.weights['weight']
signal_region_Embedded_nofakes = signal_region_Embed_nofakes * cfg.weights['embed']
signal_region_MC_nofakes_noembed = signal_region_MC_nojetfakes_noembed_cut * cfg.weights['weight'] * cfg.weights['MC']
signal_region_signalMC = signal_region_signalMC_cut * cfg.weights['weight'] * cfg.weights['MC']
# signal_region_MC_nofakes_DY = signal_region_MC_nofakes_cut * cfg.weights['weight'] * cfg.weights['MC']# * cfg.weights['DY'] weight already in base weight
# signal_region_MC_nofakes_TT = signal_region_MC_nofakes_cut * cfg.weights['weight'] * cfg.weights['MC']# * cfg.weights['TT'] same
# signal_region_MC_nofakes_Embedded = signal_region_MC_nofakes_cut * cfg.weights['embed']
# signal_region_MC_nofakes = signal_region_MC_nofakes_cut * cfg.weights['weight'] * cfg.weights['MC']
l1_FakeFactorApplication_Region_data = l1_FakeFactorApplication_Region_cut * cfg.weights['l1_fake'] * cfg.weights['weight']
l2_FakeFactorApplication_Region_data = l2_FakeFactorApplication_Region_cut * cfg.weights['l2_fake'] * cfg.weights['weight']
l1_FakeFactorApplication_Region_notjetfakes_Embedded = l1_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed'] * cfg.weights['l1_fake']
l2_FakeFactorApplication_Region_notjetfakes_Embedded = l2_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed'] * cfg.weights['l2_fake']
l1_FakeFactorApplication_Region_notjetfakes_MC = l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['l1_fake']
l2_FakeFactorApplication_Region_notjetfakes_MC = l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['l2_fake']
# l1_FakeFactorApplication_Region_notjetfakes_DY = l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['l1_fake']# * cfg.weights['DY'] 
# l2_FakeFactorApplication_Region_notjetfakes_DY = l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['l2_fake']# * cfg.weights['DY'] 
# l1_FakeFactorApplication_Region_notjetfakes_TT = l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['l1_fake']# * cfg.weights['TT']
# l2_FakeFactorApplication_Region_notjetfakes_TT = l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['l2_fake']# * cfg.weights['TT']

from htt_plot.systematics import sys_dict_samples
if options.small_run:
    sys_dict_samples = {
        sys_dict_samples.items()[0][0] : sys_dict_samples.items()[0][1]
    }
for key, item in sys_dict_samples.iteritems():
    if 'signal' in item['processes']:
        item['signal_cut'] = signal_region_signalMC
    if 'DY' in item['processes']:
        item['DY_cut'] = signal_region_MC_nofakes_noembed#signal_region_MC_nofakes_DY 
        item['DY_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_MC#l1_FakeFactorApplication_Region_notjetfakes_DY
        item['DY_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_MC#l2_FakeFactorApplication_Region_notjetfakes_DY
    if 'TT' in item['processes']:
        item['TT_cut'] = signal_region_MC_nofakes_noembed#signal_region_MC_nofakes_TT
        item['TT_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_MC#l1_FakeFactorApplication_Region_notjetfakes_TT
        item['TT_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_MC#l2_FakeFactorApplication_Region_notjetfakes_TT
    if any([proc in item['processes'] for proc in ['all_MC','W']]):
        item['bkg_cut'] = signal_region_MC_nofakes_noembed#signal_region_MC_nofakes
        item['bkg_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_MC#l1_FakeFactorApplication_Region_notjetfakes
        item['bkg_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_MC#l2_FakeFactorApplication_Region_notjetfakes
    if 'Embedded' in item['processes']:
        item['Embedded_cut'] = signal_region_Embedded_nofakes#signal_region_MC_nofakes_Embedded
        item['Embedded_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_Embedded#l1_FakeFactorApplication_Region_notjetfakes_Embedded
        item['Embedded_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_Embedded#l2_FakeFactorApplication_Region_notjetfakes_Embedded
        if key=='Embedding_tracking_1prong_up':
            item['Embedded_cut'] = signal_region_Embed_nofakes * cfg.weights['embed_track_1prong_up'] #signal_region_MC_nofakes_cut * cfg.weights['weight'] * cfg.weights['MC'] * cfg.weights['embed_track_1prong_up']
            item['Embedded_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_1prong_up']# l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_1prong_up'] * cfg.weights['l1_fake']
            item['Embedded_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_1prong_up']#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_1prong_up'] * cfg.weights['l2_fake']
        if key=='Embedding_tracking_1prong_down':
            item['Embedded_cut'] = signal_region_Embed_nofakes * cfg.weights['embed_track_1prong_down'] #signal_region_MC_nofakes_cut * cfg.weights['weight'] * cfg.weights['MC'] * cfg.weights['embed_track_1prong_down']
            item['Embedded_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_1prong_down']#l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_1prong_down'] * cfg.weights['l1_fake']
            item['Embedded_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_1prong_down']#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_1prong_down'] * cfg.weights['l2_fake']
        if key=='Embedding_tracking_3prong_up':
            item['Embedded_cut'] = signal_region_Embed_nofakes * cfg.weights['embed_track_3prong_up'] #signal_region_MC_nofakes_cut * cfg.weights['weight'] * cfg.weights['MC'] * cfg.weights['embed_track_3prong_up']
            item['Embedded_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_3prong_up']#l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_3prong_up'] * cfg.weights['l1_fake']
            item['Embedded_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_3prong_up']#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_3prong_up'] * cfg.weights['l2_fake']
        if key=='Embedding_tracking_3prong_down':
            item['Embedded_cut'] = signal_region_Embed_nofakes * cfg.weights['embed_track_3prong_down'] #signal_region_MC_nofakes_cut * cfg.weights['weight'] * cfg.weights['MC'] * cfg.weights['embed_track_3prong_down']
            item['Embedded_l1fakecut'] = l1_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_3prong_down']#l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_3prong_down'] * cfg.weights['l1_fake']
            item['Embedded_l2fakecut'] = l2_FakeFactorApplication_Region_notjetfakes_cut_embed * cfg.weights['embed_track_3prong_down']#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed_track_3prong_down'] * cfg.weights['l2_fake']


if options.small_run:
    up_downs = ['up']
    systs_ff_list = ['qcd_syst_{}']
else:
    up_downs = ['up','down']
    systs_ff_list = ['qcd_syst_{}','qcd_dm0_njet0_stat_{}','qcd_dm0_njet1_stat_{}','w_syst_{}','tt_syst_{}','w_syst_{}','tt_syst_{}']
    
sys_dict_weights = {}

if cfg.channel == 'tt':
    l1_fakeweight_sys_str = '0.5*l1_fakeweight_{}'
    l2_fakeweight_sys_str = '0.5*l2_fakeweight_{}'
else:
    l1_fakeweight_sys_str = '1.0'
    l2_fakeweight_sys_str = 'l2_fakeweight_{}'

for up_down in up_downs:
    for syst in systs_ff_list:
        sys_name = 'ff_{}'.format(syst.format(up_down))
        cfg.datasets.DY_datasets[sys_name] = cfg.datasets.DY_datasets['nominal']
        cfg.datasets.TT_datasets[sys_name] = cfg.datasets.TT_datasets['nominal']
        cfg.datasets.Diboson_datasets[sys_name] = cfg.datasets.Diboson_datasets['nominal']
        cfg.datasets.EWK_datasets[sys_name] = cfg.datasets.Diboson_datasets['nominal']
        cfg.datasets.singleTop_datasets[sys_name] = cfg.datasets.singleTop_datasets['nominal']
        cfg.datasets.WJ_datasets[sys_name] = cfg.datasets.WJ_datasets['nominal']
        cfg.datasets.Embedded_datasets[sys_name] = cfg.datasets.Embedded_datasets['nominal']
        sys_dict_weights[sys_name] = {'processes': ['all_MC','Embedded','data'],
                                      'DY_cut': signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes_DY,
                                      'DY_l1fakecut': l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),#l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),
                                      'DY_l2fakecut': l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down))),
                                      'TT_cut': signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes_TT,
                                      'TT_l1fakecut': l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),#l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),
                                      'TT_l2fakecut': l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down))),
                                      'bkg_cut': signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes,
                                      'bkg_l1fakecut': l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),#l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),
                                      'bkg_l2fakecut': l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down))),
                                      'Embedded_cut': signal_region_Embedded_nofakes,#signal_region_MC_nofakes_Embedded,
                                      'Embedded_l1fakecut': l1_FakeFactorApplication_Region_notjetfakes_Embedded * cfg.weights['embed'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),#l1_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),
                                      'Embedded_l2fakecut': l2_FakeFactorApplication_Region_notjetfakes_Embedded * cfg.weights['embed'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down))),#l2_FakeFactorApplication_Region_notjetfakes_cut * cfg.weights['weight'] * cfg.weights['embed'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down))),
                                      'l1fakecut': l1_FakeFactorApplication_Region_cut * cfg.weights['weight'] * Cut(l1_fakeweight_sys_str.format(syst.format(up_down))),
                                      'l2fakecut': l2_FakeFactorApplication_Region_cut * cfg.weights['weight'] * Cut(l2_fakeweight_sys_str.format(syst.format(up_down)))}
    sys_dict_weights['top_pt_reweighting_{}'.format(up_down)] = {'processes':['TT'],
                                                                 'TT_cut': signal_region_MC_nofakes_noembed *cfg.weights['TT_pTrweigh_{}'.format(up_down)], #signal_region_MC_nofakes_TT * cfg.weights['TT_pTrweigh_{}'.format(up_down)],
                                                                 'TT_l1fakecut': l1_FakeFactorApplication_Region_notjetfakes_MC * cfg.weights['TT_pTrweigh_{}'.format(up_down)],#l1_FakeFactorApplication_Region_notjetfakes_TT * cfg.weights['TT_pTrweigh_{}'.format(up_down)],
                                                                 'TT_l2fakecut': l2_FakeFactorApplication_Region_notjetfakes_MC * cfg.weights['TT_pTrweigh_{}'.format(up_down)]}#l2_FakeFactorApplication_Region_notjetfakes_TT * cfg.weights['TT_pTrweigh_{}'.format(up_down)]}
    cfg.datasets.TT_datasets['top_pt_reweighting_{}'.format(up_down)] = cfg.datasets.TT_datasets['nominal']
    sys_dict_weights['dy_pt_reweighting_{}'.format(up_down)] = {'processes':['DY'],
                                                                 'DY_cut': signal_region_MC_nofakes_noembed *cfg.weights['DY_pTrweigh_{}'.format(up_down)],#signal_region_MC_nofakes_DY * cfg.weights['DY_pTrweigh_{}'.format(up_down)],
                                                                 'DY_l1fakecut': l1_FakeFactorApplication_Region_notjetfakes_MC * cfg.weights['DY_pTrweigh_{}'.format(up_down)],#l1_FakeFactorApplication_Region_notjetfakes_DY * cfg.weights['DY_pTrweigh_{}'.format(up_down)],
                                                                 'DY_l2fakecut': l2_FakeFactorApplication_Region_notjetfakes_MC * cfg.weights['DY_pTrweigh_{}'.format(up_down)]}#l2_FakeFactorApplication_Region_notjetfakes_DY * cfg.weights['DY_pTrweigh_{}'.format(up_down)]}
    cfg.datasets.DY_datasets['dy_pt_reweighting_{}'.format(up_down)] = cfg.datasets.DY_datasets['nominal']
    

for key, item in sys_dict_weights.iteritems():
    if 'all_MC' in item['processes']:
        item['processes'].extend(['DY','TT','Diboson','singleTop','W','EWK'])
        
sys_dict = sys_dict_samples.copy()
sys_dict.update(sys_dict_weights)
    

#########
# Cfgs and components
#########

from htt_plot.tools.builder import build_cfgs, merge
from htt_plot.tools.builder import  merge_components as merge_comps
from htt_plot.tools.utils import add_processes_per_component, add_simple_process

cfg_dict = {}
dc_comps = {}
components = {}
for variable in variables:
    bins = cfg.bins[variable]
    cfg_dict[variable] = {}
    dc_comps[variable] = {}
    cfg_dict[variable]['nominal'] = {}
    cfgs = cfg_dict[variable]['nominal'] # for lighter syntax

    #signal
    for mass in mass_points:#,'300','400',,'700','800','900'
        add_simple_process(cfgs,'ggH{}'.format(mass),cfg.datasets.signal_datasets['nominal']['ggH{}'.format(mass)],variable,signal_region_signalMC,bins)
        add_simple_process(cfgs,'bbH{}'.format(mass),cfg.datasets.signal_datasets['nominal']['bbH{}'.format(mass)],variable,signal_region_signalMC,bins)
    
    #DY
    add_processes_per_component(cfgs,
                                'DY',
                                ['ZTT','ZL','ZJ'],
                                cfg.datasets.DY_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes_DY,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC,#l1_FakeFactorApplication_Region_notjetfakes_DY,
                                l2_FakeFactorApplication_Region_notjetfakes_MC,#l2_FakeFactorApplication_Region_notjetfakes_DY,
                                bins,
                                mergedict = {'ZLL':['ZL','ZJ'],
                                             'DY':['ZLL','ZTT']})

    #TT
    add_processes_per_component(cfgs,
                                'TT',
                                ['TTT','TTJ','TTL'],
                                cfg.datasets.TT_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes_TT,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC,#l1_FakeFactorApplication_Region_notjetfakes_TT,
                                l2_FakeFactorApplication_Region_notjetfakes_MC,#l2_FakeFactorApplication_Region_notjetfakes_TT,
                                bins,
                                mergedict = {'TT':['TTT','TTJ']})

    #Diboson
    add_processes_per_component(cfgs,
                                'Diboson',
                                ['Diboson_VVT','Diboson_VVJ','Diboson_VVL'],
                                cfg.datasets.Diboson_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC,#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC,#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'Diboson':['Diboson_VVT','Diboson_VVJ']})
    
    #EWK
    add_processes_per_component(cfgs,
                                'EWK',
                                ['EWK_VVT','EWK_VVJ','EWK_VVL'],
                                cfg.datasets.EWK_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC,#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC,#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'EWK':['EWK_VVT','EWK_VVJ']})

    #singleTop
    add_processes_per_component(cfgs,
                                'singleTop',
                                ['singleTop_VVT','singleTop_VVJ','singleTop_VVL'],
                                cfg.datasets.singleTop_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC,#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC,#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'singleTop':['singleTop_VVT','singleTop_VVJ']})
    
    #VV
    cfgs['VVL'] = merge('VVL', [cfgs['Diboson_VVL'],cfgs['singleTop_VVL'],cfgs['EWK_VVL']])
    cfgs['VVT'] = merge('VVT', [cfgs['Diboson_VVT'],cfgs['singleTop_VVT'],cfgs['EWK_VVL']])
    cfgs['VVJ'] = merge('VVJ', [cfgs['Diboson_VVJ'],cfgs['singleTop_VVJ'],cfgs['EWK_VVL']])
    cfgs['VV'] = merge('VV', [cfgs['VVJ'],cfgs['VVT']])
    
    #W
    add_processes_per_component(cfgs,
                                'W',
                                ['WJ'],
                                cfg.datasets.WJ_datasets['nominal'],
                                variable,
                                signal_region_MC_nofakes_noembed,#signal_region_MC_nofakes,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_MC,#l1_FakeFactorApplication_Region_notjetfakes,
                                l2_FakeFactorApplication_Region_notjetfakes_MC,#l2_FakeFactorApplication_Region_notjetfakes,
                                bins,
                                mergedict = {'W':['WJ']})
    
    # data
    add_processes_per_component(cfgs,
                                'data_obs',
                                ['data'],
                                cfg.datasets.data_datasets,
                                variable,
                                signal_region,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_data,#l1_FakeFactorApplication_Region,
                                l2_FakeFactorApplication_Region_data,#l2_FakeFactorApplication_Region,
                                bins,
                                mergedict = {'data_obs':['data']})
        
    # Embedded
    add_processes_per_component(cfgs,
                                'Embedded',
                                ['embed'],
                                cfg.datasets.Embedded_datasets['nominal'],
                                variable,
                                signal_region_Embedded_nofakes,#signal_region_Embedded,
                                cfg.cuts_datacards,
                                l1_FakeFactorApplication_Region_notjetfakes_Embedded,#l1_FakeFactorApplication_Region_notjetfakes_Embedded,
                                l2_FakeFactorApplication_Region_notjetfakes_Embedded,#l2_FakeFactorApplication_Region_notjetfakes_Embedded,
                                bins,
                                mergedict = {'Embedded':['embed']})

    #Embedding test
    cfgs['XTT'] = merge('XTT', [cfgs['ZTT'],
                                cfgs['TTT'],
                                cfgs['VVT']])
    
    # fakes
    cfgs['fakes'] = merge('fakes', [cfgs['fakes_data_obs'],
                                    cfgs['fakes_DY'],
                                    cfgs['fakes_TT'],
                                    cfgs['fakes_Diboson'],
                                    cfgs['fakes_EWK'],
                                    cfgs['fakes_singleTop'],
                                    cfgs['fakes_W'],
                                    cfgs['fakes_Embedded']])

    components[variable] = [cfgs['DY'],
                            cfgs['TT'],
                            cfgs['singleTop'],
                            cfgs['Diboson'],
                            cfgs['EWK'],
                            cfgs['W'],
                            cfgs['data_obs'],
                            cfgs['Embedded'],
                            cfgs['fakes']]

    dc_comps[variable]['nominal'] = {
        'ZL' : cfgs['ZL'],
        'TTL' : cfgs['TTL'],
        'VVL' : cfgs['VVL'],
        'jetFakes' : cfgs['fakes'],
        'data_obs' : cfgs['data_obs'],
        'Embedded' : cfgs['Embedded'],
        'XTT' : cfgs['XTT']
    }
    for mass in mass_points:
        dc_comps[variable]['nominal']['ggH{}'.format(mass)] = cfgs['ggH{}'.format(mass)]
        dc_comps[variable]['nominal']['bbH{}'.format(mass)] = cfgs['bbH{}'.format(mass)]


# systematics
import copy

for variable in datacards_variables:
    bins = cfg.bins[variable]
    for sys in sys_dict:
        cfg_dict[variable][sys] = copy.copy(cfg_dict[variable]['nominal'])
        cfgs = cfg_dict[variable][sys] # for lighter syntax

        #signal
        if 'signal' in sys_dict[sys]['processes']:
            for mass in mass_points:
                add_simple_process(cfgs,'ggH{}'.format(mass),cfg.datasets.signal_datasets[sys]['ggH{}'.format(mass)],variable,sys_dict[sys]['signal_cut'],bins)
                add_simple_process(cfgs,'bbH{}'.format(mass),cfg.datasets.signal_datasets[sys]['bbH{}'.format(mass)],variable,sys_dict[sys]['signal_cut'],bins)

        #DY
        if 'DY' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'DY',
                                        ['ZTT','ZL','ZJ'],
                                        cfg.datasets.DY_datasets[sys],
                                        variable,
                                        sys_dict[sys]['DY_cut'],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['DY_l1fakecut'],
                                        sys_dict[sys]['DY_l2fakecut'],
                                        bins,
                                        mergedict = {'ZLL':['ZL','ZJ'],
                                                     'DY':['ZLL','ZTT']})
        
        #TT
        if 'TT' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'TT',
                                        ['TTT','TTJ'],
                                        cfg.datasets.TT_datasets[sys],
                                        variable,
                                        sys_dict[sys]['TT_cut'],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['TT_l1fakecut'],
                                        sys_dict[sys]['TT_l2fakecut'],
                                        bins,
                                        mergedict = {'TT':['TTT','TTJ']})
        
        #Diboson
        if 'Diboson' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'Diboson',
                                        ['Diboson_VVT','Diboson_VVJ'],
                                        cfg.datasets.Diboson_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut'],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut'],
                                        sys_dict[sys]['bkg_l2fakecut'],
                                        bins,
                                        mergedict = {'Diboson':['Diboson_VVT','Diboson_VVJ']})
        
        #EWK
        if 'EWK' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'EWK',
                                        ['EWK_VVT','EWK_VVJ'],
                                        cfg.datasets.EWK_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut'],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut'],
                                        sys_dict[sys]['bkg_l2fakecut'],
                                        bins,
                                        mergedict = {'EWK':['EWK_VVT','EWK_VVJ']})

        #singleTop
        if 'singleTop' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'singleTop',
                                        ['singleTop_VVT','singleTop_VVJ'],
                                        cfg.datasets.singleTop_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut'],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut'],
                                        sys_dict[sys]['bkg_l2fakecut'],
                                        bins,
                                        mergedict = {'singleTop':['singleTop_VVT','singleTop_VVJ']})
    
        #VV
        if any([name in sys_dict[sys]['processes'] for name in ['Diboson','singleTop','EWK']]):
            cfgs['VVT'] = merge('VVT', [cfgs['Diboson_VVT'],cfgs['singleTop_VVT'],cfgs['EWK_VVT']])
            cfgs['VVJ'] = merge('VVJ', [cfgs['Diboson_VVJ'],cfgs['singleTop_VVT'],cfgs['EWK_VVT']])
            cfgs['VV'] = merge('VV', [cfgs['VVJ'],cfgs['VVT']])
    
        #W
        if 'W' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'W',
                                        ['WJ'],
                                        cfg.datasets.WJ_datasets[sys],
                                        variable,
                                        sys_dict[sys]['bkg_cut'],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['bkg_l1fakecut'],
                                        sys_dict[sys]['bkg_l2fakecut'],
                                        bins,
                                        mergedict = {'W':['WJ']})
    
        # data
        if 'data' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'data_obs',
                                        ['data'],
                                        cfg.datasets.data_datasets,
                                        variable,
                                        signal_region,
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['l1fakecut'],
                                        sys_dict[sys]['l2fakecut'],
                                        bins,
                                        mergedict = {'data_obs':['data']})
        
        # Embedded
        if 'Embedded' in sys_dict[sys]['processes']:
            add_processes_per_component(cfgs,
                                        'Embedded',
                                        ['embed'],
                                        cfg.datasets.Embedded_datasets[sys],
                                        variable,
                                        sys_dict[sys]['Embedded_cut'],
                                        cfg.cuts_datacards,
                                        sys_dict[sys]['Embedded_l1fakecut'],
                                        sys_dict[sys]['Embedded_l2fakecut'],
                                        bins,
                                        mergedict = {'Embedded':['embed']})

        # fakes
        if any([name in sys_dict[sys]['processes'] for name in ['data_obs','DY','TT','Diboson','singleTop','W','Embedded','EWK']]):
            cfgs['fakes'] = merge('fakes', [cfgs['fakes_data_obs'],
                                            cfgs['fakes_DY'],
                                            cfgs['fakes_TT'],
                                            cfgs['fakes_Diboson'],
                                            cfgs['fakes_EWK'],
                                            cfgs['fakes_singleTop'],
                                            cfgs['fakes_W'],
                                            cfgs['fakes_Embedded']])


        dc_comps[variable][sys] = {'jetFakes' : cfgs['fakes']}
        if not ('ff_' in sys):
            for process in sys_dict[sys]['processes']:
                if process in ['ZL','TTL','VVL','Embedded']:
                    dc_comps[variable][sys][process] = cfgs[process]
                if process == 'signal':
                    for mass in mass_points:#,'300','400',,'700','800','900'
                        dc_comps[variable][sys]['ggH{}'.format(mass)] = cfgs['ggH{}'.format(mass)]
                        dc_comps[variable][sys]['bbH{}'.format(mass)] = cfgs['bbH{}'.format(mass)]
                
        # dc_comps[variable][sys] = {
        #     'ZTT' : cfgs['ZTT'],
        #     'ZL' : cfgs['ZL'],
        #     'ZJ' : cfgs['ZJ'],
        #     'ZLL' : cfgs['ZLL'],
        #     'TTT' : cfgs['TTT'],
        #     'TTJ' : cfgs['TTJ'],
        #     'TT' : cfgs['TT'],
        #     'VVT' : cfgs['VVT'],
        #     'VVJ' : cfgs['VVJ'],
        #     'VV' : cfgs['VV'],
        #     'W' : cfgs['W'],
        #     'Embedded' : cfgs['Embedded'],
        #     'ggH200' : cfgs['ggH200']
        # }
    
processes = []

channel_strings_for_plot = {
    'tt' : '#tauh#tauh',
    'mt' : '#mu#tauh',
    'et' : '#ele#tauh',
    }

def write_plots(plotter, variable, output_dir):
    varname = cfg.var_name_dict[variable] if variable in cfg.var_name_dict else variable
    plotter.draw(
        varname,
        '{#rm d}N/{#rm d}m_{#rm T}^{#rm tot}(1/#SI{}{GeV})',
        category = category,
        channel_str = channel_strings_for_plot[cfg.channel])
    plotter.write('{}/{}/{}.png'.format(output_dir, category, varname))
    plotter.write('{}/{}/{}.tex'.format(output_dir, category, varname))
    plotter.write('{}/{}/{}.root'.format(output_dir, category, varname))
    print plotter.plot

for variable in plot_variables:
    processes.append(
        delayed(write_plots)(
            delayed(Plotter)(components[variable], cfg.datasets.data_lumi),
            variable,
            output_dir
            )
        )

if not options.just_plot:
    for variable in datacards_variables:
        processes.append(
            delayed(make_datacards)(
                output_dir,
                cfg.channel,
                variable,
                dc_comps[variable],
                category = category,
                systematics = ['nominal']+sys_dict.keys()
            )
        )

import os
# os.system('rm -rf {}'.format(output_dir))
if not os.path.exists(output_dir):
    os.system('mkdir -p {}'.format(output_dir))
if not os.path.exists('{}/{}'.format(output_dir,category)):
    os.system('mkdir -p {}/{}'.format(output_dir,category))
        
visualize(*processes)
#import pdb; pdb.set_trace()
if not options.dry_run:
    compute(*processes)
