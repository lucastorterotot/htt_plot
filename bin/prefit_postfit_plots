#!/usr/bin/env python
# -*- coding: utf-8 -*-

# options for script
from optparse import OptionParser
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-c", "--channel", dest = "channel",
                  default="tt",
                  help='Name of the channel')
parser.add_option("-o", "--output", dest = "output_dir",
                  default="prefit_postfit_plots",
                  help='Output directory base name, channel is added')
parser.add_option("-C", "--category", dest = "category",
                  default="all",
                  help='Category to process: all or list of inclusive, btag, nobtag...')
parser.add_option("-m", "--masses", dest = "masses",
                  default=None,
                  help='Masses to process: default to None, or give a list of values')

(options,args) = parser.parse_args()

import copy

from ROOT import TFile, TPaveText, Double, TH1F
from htt_plot.tools.plotting.plotter import Plotter
from htt_plot.tools.component import Hist_Component
from cpyroot.tools.DataMC.Stack import Stack
from array import array

cat_dict_tt = {
    'tt_btag':'htt_tt_9_13TeV',
    'tt_nobtag':'htt_tt_8_13TeV',
    #'tt_inclusive':'htt_tt_7_13TeV',
}

cat_dict_mt = {
    'mt_nobtag_tight':'htt_mt_8_13TeV',
    'mt_btag_tight':'htt_mt_9_13TeV',
    'mt_nobtag_loosemt':'htt_mt_10_13TeV',
    'mt_btag_loosemt':'htt_mt_11_13TeV',
    'mt_inclusive':'htt_mt_7_13TeV',
}

cat_dict_et = {
    'et_nobtag_tight':'htt_et_8_13TeV',
    'et_btag_tight':'htt_et_9_13TeV',
    'et_nobtag_loosemt':'htt_et_10_13TeV',
    'et_btag_loosemt':'htt_et_11_13TeV',
    'et_inclusive':'htt_et_7_13TeV',
}

cat_dict = {
    'tt' : cat_dict_tt,
}

if options.category == 'all':
    cats_to_process = cat_dict[options.channel]
elif channel in ['tt', 'mt', 'et']:
    cats_to_process = {}
    for cat in options.category:
        cats_to_process['_'.join([options.channel, cat])] = cat_dict[options.channel]['_'.join([options.channel, cat])]
else:
    cats_to_process = []

limits = {600:0.0341033935546875,
          800:0.037841796875,
          900:0.0146484375
}

channel_strings_for_plot = {
    'tt' : '#tauh#tauh',
    'mt' : '#mu#tauh',
    'et' : '#ele#tauh',
}

def plot(prefit=True,bonly=True, mass=None, channel=options.channel):
    data_file = TFile('./inputs/{}/htt_{}.inputs_datacards_mt_tot.root'.format(channel,channel))
    if mass:
        shapes_file = TFile('./inputs/{}/fitDiagnosticstest_output_{}.root'.format(channel,mass))
    else:
        shapes_file = TFile('./inputs/{}/fitDiagnosticstest_output.root'.format(channel))
    if prefit:
        shapedir = 'shapes_prefit'
    else:
        if bonly:
            shapedir = 'shapes_fit_b'
        else:
            shapedir = 'shapes_fit_s'
    
    for cat in cats_to_process:
        ### subdir retrieval
        data_shape_dir = data_file.Get(cat)
        shapes_dir = shapes_file.Get(shapedir).Get(cats_to_process[cat])
        unc_hist = shapes_dir.Get('total_background')

        comp_names = ['TTL','VVL','ZL','Embedded','jetFakes']
        comps = []

        data_hist_tmp = data_shape_dir.Get('data_obs')
        if cat == 'tt_btag':
            data_hist = TH1F('data_obs','data_obs', 29, array('d',[0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,225,250,275,300,325,350,400,500,700,900]))
        elif cat == 'tt_nobtag':
            data_hist = TH1F('data_hist','data_hist', 29, array('d',[0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,225,250,275,300,325,350,400,500,700,900,4000]))
        data_hist.SetTitle('')
        data_histcomp = copy.copy(data_hist)
        data_graph = shapes_dir.Get('data')
        for b in range(data_hist.GetNbinsX()):
            x = Double(0)
            y = Double(0)
            data_graph.GetPoint(b,x,y)
            data_histcomp.SetBinContent(b+1,y)
            if y==0.:
                data_histcomp.SetBinError(b+1,1)
            else:
                data_histcomp.SetBinError(b+1,data_graph.GetErrorY(b)*data_histcomp.GetBinContent(b+1)/y)
        comp = Hist_Component(data_histcomp)
        comp.var = 'mt_tot'
        comps.append(comp)
    
        for comp_name in comp_names:
            unvar_h = shapes_dir.Get(comp_name)
            h = copy.copy(data_hist)
            h.SetName(comp_name)
            for b in range(h.GetNbinsX()):
                h.SetBinContent(b+1,unvar_h.GetBinContent(b+1))
                h.SetBinError(b+1,0)
            h.SetTitle('')
            comp = Hist_Component(h)
            comp.var = 'mt_tot'
            comps.append(comp)

        if mass:
            unvar_sig_bb = shapes_dir.Get('bbH')
            sig_hist = copy.copy(data_hist)
            sig_hist.SetName('signal_bbH{}'.format(mass))
            for b in range(sig_hist.GetNbinsX()):
                sig_hist.SetBinContent(b+1,(unvar_sig_bb.GetBinContent(b+1))/(data_hist.GetBinLowEdge(b+2)-data_hist.GetBinLowEdge(b+1)))
                sig_hist.SetBinError(b+1,0)
            # sig_hist.Scale(limits[mass])
            sig_hist.SetTitle('')
            comp_sig = Hist_Component(sig_hist)
            comp_sig.var = 'mt_tot'
            comps.append(comp_sig)
        
            # unvar_sig_gg = data_shape_dir.Get('ggH{}'.format(mass))
            # sig_hist = copy.copy(data_hist)
            # sig_hist.SetName('signal_ggH{}'.format(mass))
            # for b in range(sig_hist.GetNbinsX()):
            #     sig_hist.SetBinContent(b+1,(unvar_sig_gg.GetBinContent(b+1))/(data_hist.GetBinLowEdge(b+2)-data_hist.GetBinLowEdge(b+1)))
            #     sig_hist.SetBinError(b+1,0)
            # sig_hist.SetTitle('')
            # comp_sig = Hist_Component(sig_hist)
            # comp_sig.var = 'mt_tot'
            # comps.append(comp_sig)
        # if prefit:
        #     unvar_sig_gg = data_shape_dir.Get('ggH600')
        #     unvar_sig_bb = data_shape_dir.Get('bbH600')
        # else:
        #     unvar_sig_gg = shapes_dir.Get('ggH')
        #     unvar_sig_bb = shapes_dir.Get('bbH')
        # sig_hist = copy.copy(data_hist)
        # sig_hist.SetName('signal_H600')
        # for b in range(sig_hist.GetNbinsX()):
        #     sig_hist.SetBinContent(b+1,unvar_sig_gg.GetBinContent(b+1)+unvar_sig_bb.GetBinContent(b+1))
        #     sig_hist.SetBinError(b+1,0)
        # sig_hist.SetTitle('')
        # comp_sig = Hist_Component(sig_hist)
        # comp_sig.var = 'mt_tot'
        # comps.append(comp_sig)
        
        ### prep unc hist
        uncertainties = copy.copy(data_hist)
        uncertainties.SetName('total_background')
        uncertainties_rel = copy.copy(uncertainties)
        for b in range(uncertainties.GetNbinsX()):
            uncertainties.SetBinContent(b+1,unc_hist.GetBinContent(b+1)/(data_hist.GetBinLowEdge(b+2)-data_hist.GetBinLowEdge(b+1)))
            uncertainties.SetBinError(b+1,unc_hist.GetBinError(b+1)*uncertainties.GetBinContent(b+1)/unc_hist.GetBinContent(b+1))
            uncertainties_rel.SetBinContent(b+1,1)
            uncertainties_rel.SetBinError(b+1,uncertainties.GetBinError(b+1)/uncertainties.GetBinContent(b+1))
        
        plotter = Plotter(comps,41.5)
        plotter.draw('mt_tot',
                     '{#rm d}N/{#rm d}m_{#rm T}^{#rm tot}(1/#SI{}{GeV})',
                     sys_error_hist=uncertainties,
                     category = ' '.join(cat.split('_')[1:]),
                     channel_str = channel_strings_for_plot[channel],
                     blind = True,
                     x_range = [0,700],
                     y_range = [1e-2, 5e5]
        )
        if prefit:
            outfilename = 'prefit_plots_{}'
        else:
            if bonly:
                outfilename = 'postfit_b_plots_{}'
            else:
                outfilename = 'postfit_s_plots_{}'
        if mass:
            # plotter.write((outfilename+str(mass)+'.root').format(cat))
            plotter.write((outfilename+str(mass)+'.pdf').format(cat))
            plotter.write((outfilename+str(mass)+'.png').format(cat))
        else:
            # plotter.write((outfilename+'.root').format(cat))
            plotter.write((outfilename+'.pdf').format(cat))
            plotter.write((outfilename+'.png').format(cat))

# plot(prefit=False,bonly=False)
# plot(prefit=False,bonly=True)
# for mass in [400,450,600,800,900,1400,1800,2000]:
#     plot(prefit=False,bonly=False,mass=mass)
plot(prefit=False,bonly=False,mass=None)
